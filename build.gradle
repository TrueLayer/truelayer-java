import com.vanniktech.maven.publish.JavaLibrary
import com.vanniktech.maven.publish.JavadocJar

plugins {
    id 'java-library'
    // to unleash the lombok magic
    id "io.freefair.lombok" version "8.14.2"
    // to make our tests output more fancy
    id 'com.adarshr.test-logger' version '4.0.0'
    // code linting
    id "com.diffplug.spotless" version "7.0.3"
    //  test coverage
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.12.2'
    // maven central publishing
    id "com.vanniktech.maven.publish" version "0.34.0"
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

spotless {
    java {
        palantirJavaFormat()
    }
}

tasks.register('createProperties') {
    dependsOn processResources
    doLast {
        file("${layout.buildDirectory.get()}/resources/main/truelayer-java.version.properties").withWriter { w ->
            Properties p = new Properties()
            p['name'] = archivesBaseName
            p['version'] = project.version != "unspecified" ? project.version : "DEVELOPMENT"
            p.store w, null
        }
    }
}

classes {
    dependsOn createProperties
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

test {
    useJUnitPlatform{
        excludeTags "acceptance" // exclude acceptance tests from the default test task
    }
}

testlogger {
    theme 'mocha'
}

tasks.register('unit-tests', Test) {
    outputs.upToDateWhen { false }
    useJUnitPlatform{
        excludeTags "integration"
        excludeTags "acceptance"
    }
}

tasks.register('integration-tests', Test) {
    outputs.upToDateWhen { false }
    useJUnitPlatform{
        includeTags "integration"
    }
}

tasks.register('acceptance-tests', Test) {
    outputs.upToDateWhen { false }
    useJUnitPlatform{
        includeTags "acceptance"
    }
    // toggle this to see raw logs during acceptance tests
    testLogging.showStandardStreams = false
}

dependencies {
    // Utilities
    implementation group: 'org.apache.commons', name: 'commons-configuration2', version: '2.11.0'

    // HTTP client
    def retrofitVersion = '2.9.0'
    implementation group: 'com.squareup.retrofit2', name: 'retrofit', version: retrofitVersion
    implementation group: 'com.squareup.retrofit2', name: 'converter-jackson', version: retrofitVersion

    // TL signing library
    implementation group: 'com.truelayer', name: 'truelayer-signing', version: '0.2.6'

    // Serialization
    def jacksonVersion = '2.14.1'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: jacksonVersion
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: jacksonVersion
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8', version: jacksonVersion
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: jacksonVersion
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion

    // Logging
    def tinyLogVersion = '2.5.0'
    implementation group: 'org.tinylog', name: 'tinylog-api', version: tinyLogVersion
    implementation group: 'org.tinylog', name: 'tinylog-impl', version: tinyLogVersion

    // JUnit test framework.
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.12.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Mocking libraries
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.17.0'
    testImplementation group: 'org.wiremock', name: 'wiremock', version: '3.12.1'

    // Wait test utility
    testImplementation group: 'org.awaitility', name: 'awaitility', version: '4.3.0'

    // Transitive dependencies constraints
    constraints {
        implementation('com.squareup.okhttp3:okhttp:4.12.0') {
            because 'version 3.14.9 used by com.squareup.retrofit2:retrofit:2.9.0 has known vulnerabilities'
        }
    }
}

jacocoTestReport {
    dependsOn "unit-tests"
    reports {
        xml.required = true
        html.required = true
    }
    getExecutionData().setFrom(fileTree(buildDir).include("/jacoco/unit-tests.exec"))
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'com/truelayer/java/**/entities/**',
                    'com/truelayer/java/common/Constants.*',
                    'com/truelayer/java/common/Constants$*.*',
                    'com/truelayer/java/http/TrueLayerApiAdapterFactory.*',
                    'com/truelayer/java/http/TrueLayerResponseCallAdapter.*',
                    'com/truelayer/java/http/TrueLayerResponseCallAdapter$*.*'
            ])
        }))
    }
}

tasks.register('sourcesJar', Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

tasks.register('javadocJar', Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

mavenPublishing {
    publishToMavenCentral(true)
    signAllPublications()

    // Use the sources and javadoc jars
    configure(new JavaLibrary(new JavadocJar.Javadoc(), true))

    pom {
        name = project_name
        packaging = 'jar'
        description = project_description
        url = project_url
        scm {
            connection = project_scm
            url = project_url
        }
        licenses {
            license {
                name = project_license_name
                url = project_license_url
                distribution = project_license_url
            }
        }
        developers {
            developer {
                id = developer_name
                name = developer_name
                url = developer_url
            }
        }
    }
}