package com.truelayer.java.integration;

import static com.github.tomakehurst.wiremock.client.WireMock.*;
import static com.truelayer.java.Constants.HeaderNames.*;
import static com.truelayer.java.TestUtils.UUID_REGEX_PATTERN;

import com.truelayer.java.TestUtils.RequestStub;
import com.truelayer.java.http.entities.Headers;
import com.truelayer.java.payments.entities.CreatePaymentRequest;
import lombok.SneakyThrows;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

// TODO: review these tests
@DisplayName("HTTP Headers management integration tests")
public class HttpHeadersManagementTests extends IntegrationTests {

    @SneakyThrows
    @Test
    @DisplayName("Should send an auto generated UUID as idempotency key if not provided")
    public void shouldSendAutoGeneratedIdempotencyKey() {
        RequestStub.New()
                .method("post")
                .path(urlPathEqualTo("/connect/token"))
                .status(200)
                .bodyFile("auth/200.access_token.json")
                .build();
        CreatePaymentRequest paymentRequest = CreatePaymentRequest.builder().build();

        tlClient.payments().createPayment(paymentRequest).get();

        verify(postRequestedFor(urlPathEqualTo("/payments"))
                .withHeader(IDEMPOTENCY_KEY, matching(UUID_REGEX_PATTERN.pattern())));
    }

    @SneakyThrows
    @Test
    @DisplayName("Should send a provided custom idempotency key")
    public void shouldSendAProvidedCustomIdempotencyKey() {
        RequestStub.New()
                .method("post")
                .path(urlPathEqualTo("/connect/token"))
                .status(200)
                .bodyFile("auth/200.access_token.json")
                .build();
        CreatePaymentRequest paymentRequest = CreatePaymentRequest.builder().build();
        String idempotencyKey = "custom-key";
        String signature = "custom-signature";
        String xFowardedFor = "custom-origin";

        tlClient.payments()
                .createPayment(
                        Headers.builder()
                                .signature(signature)
                                .idempotencyKey(idempotencyKey)
                                .xForwardedFor(xFowardedFor)
                                .build(),
                        paymentRequest)
                .get();

        verify(postRequestedFor(urlPathEqualTo("/payments"))
                .withHeader(TL_SIGNATURE, equalTo(signature))
                .withHeader(X_FORWARDED_FOR, equalTo(xFowardedFor))
                .withHeader(IDEMPOTENCY_KEY, equalTo(idempotencyKey)));
    }
}
